<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	autoDrawBackground="false" xmlns:views="views.*"
	creationComplete="iconitemrenderer1_creationCompleteHandler(event)"
	>
	
	<fx:Script>
		<![CDATA[
//			import mx.events.MenuEvent;
			
			import spark.components.ViewNavigator;
			import views.mapView;
			
			
			
			protected function handleMouseDown(event:MouseEvent):void
			{

				<!--navigator.pushView(mapView, null, null, transition);-->
			}
			
			protected function getMaps():void
			{
				
				//navigator.pushView(mapView, null, null, transition);
			}
			
			
			protected function init():void
			{
				//menuButton.addEventListener(MouseEvent.MOUSE_DOWN, clicky2);
			
				
			}
			
			protected function clicky2(event:MouseEvent):void
			{
				//var e : MouseEvent = new MouseEvent("menuClick");
								
				//var e : MouseEvent = new MouseEvent(
				//dispatchEvent(e);
				trace("tsest work");
				event.stopImmediatePropagation();
			}
			
			protected function changeState():void
			{
			
			}
///////////////////////////////////////////////
			import events.ScrollingEvent;
			
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.MoveEvent;
			
			import spark.components.Button;
			import spark.components.List;
			import spark.events.ListEvent;
			
			private var FLAGSTATE:int = 2;
			
			protected function iconitemrenderer1_creationCompleteHandler(event:FlexEvent):void
			{
				
				Multitouch.inputMode = MultitouchInputMode.GESTURE;
				this.addEventListener(TransformGestureEvent.GESTURE_SWIPE, onSwipe);
				
				this.parentApplication.dispatcher.addEventListener(ScrollingEvent.SCROLLING_STARTED, onScrollAgain);
				wipeEffect.addEventListener(EffectEvent.EFFECT_END, onEffectEnd);
				wipeEffectOut.addEventListener(EffectEvent.EFFECT_END, onEffetEndOut);
			}
			
			protected function onSwipe(event:TransformGestureEvent):void
			{
				
				var myScrollEvent:ScrollingEvent = new ScrollingEvent(ScrollingEvent.SCROLLING_STARTED);
				
				if((event.offsetX == -1) && (FLAGSTATE == 2)){
					
					this.addChild(actBar);
					
					actBar.width = this.width;
					actBar.height = this.height;
					actBar.visible = true;
					actBar.theData = data;
					actBar.addEventListener(FlexEvent.CREATION_COMPLETE, onItemComplete);
					FLAGSTATE = 0;
					
					this.parentApplication.dispatcher.dispatchEvent(myScrollEvent);
				}else{
					if ((event.offsetX == -1)){
						wipeEffect.play();
						this.parentApplication.dispatcher.dispatchEvent(myScrollEvent);
					}
				}
			}
			
			protected function onItemComplete(event:FlexEvent):void
			{
				wipeEffect.play();
			}
			
			private function onScrollAgain(event:ScrollingEvent):void
			{
				
				trace("scrolling");
				if (FLAGSTATE == 1){
					wipeEffectOut.play();
				}
				
			}			
			
			protected function onEffectEnd(event:EffectEvent):void
			{
				FLAGSTATE = 1;
			}
			
			protected function onEffetEndOut(event:EffectEvent):void
			{
				FLAGSTATE = 0;
			}
			
			
		
		
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		
		<s:HGroup id="actBar2" chromeColor="#ff4d58">
			<s:Button id="btn1" label="action1" chromeColor="#ff4d58" width="50" height="20"/>
			<s:Button label="action2" chromeColor="#ff4d58" width="50" height="20"/>
			
		</s:HGroup>
		
		<s:Parallel id="wipeEffect" target="{actBar}">
			<s:Move duration="300" xFrom="{this.width}" xTo="0"/>
		</s:Parallel>
		<s:Parallel id="wipeEffectOut" target="{actBar}">
			<s:Move duration="150" xTo="{this.width}" xFrom="0"/>
		</s:Parallel>
		<views:ActionBG id="actBar" width="{this.width}" height="{this.height}"/>
	</fx:Declarations>
	
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="selected"/>
	</s:states>
	<s:Rect  id="rect1" left="10" right="10" height="50" includeIn="normal">
		<s:fill>
			<s:SolidColor color="0x000000" alpha="0.2"/>
		</s:fill>
	</s:Rect>
	<s:Rect  id="rect2" left="10" right="10" height="20" top="50" >
		<s:fill>
			<s:SolidColor color="0x000000" alpha="0"/>
		</s:fill>
	</s:Rect>
	
	<s:Rect  id="rect3" left="10" right="10" height="50" includeIn="selected">
		<s:fill>
			<s:SolidColor color="0xffffff" alpha="1"/>
		</s:fill>
	</s:Rect>

	
	<s:Label text="{this.data.group_name} - {this.data.user_id}" width="210" top="20" left="10" height="30" fontSize="16"/>
	<s:Button icon="assets/gps.png" right="10" top="5" height="40" width="40" skinClass="skins.ButtonSkinTrans"/>

	<!--
	<s:Label text="{this.data.origin}, {this.data.arrival_time}" top="30" left="10"/>click="currentState='selected';"
		<s:Label text="{this.data.destination}, {this.data.departure_time}" top="50" bottom="10" left="10"/>
		<s:Button label="menu" id="menuButton" mouseDown="clicky2(event)" icon="assets/map.png" right="10" height="40" width="40" top="10" skinClass="assets.ButtonSkinTrans"/>
		<s:Button icon="assets/bin.png" right="10" top="45" height="40" width="40" skinClass="assets.ButtonSkinTrans"/>
	-->
	
	
	
	
		
	
	
</s:ItemRenderer>